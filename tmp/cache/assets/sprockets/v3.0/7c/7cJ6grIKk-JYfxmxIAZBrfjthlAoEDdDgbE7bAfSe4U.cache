I"È(function() {
  '// Starrr plugin (https://github.com/dobtco/starrr)\nvar __slice = [].slice;\n\n(function($, window) {\n  var Starrr;\n\n  Starrr = (function() {\n    Starrr.prototype.defaults = {\n      rating: void 0,\n      numStars: 5,\n      change: function(e, value) {}\n    };\n\n    function Starrr($el, options) {\n      var i, _, _ref,\n        _this = this;\n\n      this.options = $.extend({}, this.defaults, options);\n      this.$el = $el;\n      _ref = this.defaults;\n      for (i in _ref) {\n        _ = _ref[i];\n        if (this.$el.data(i) != null) {\n          this.options[i] = this.$el.data(i);\n        }\n      }\n      this.createStars();\n      this.syncRating();\n      this.$el.on(\'mouseover.starrr\', \'span\', function(e) {\n        return _this.syncRating(_this.$el.find(\'span\').index(e.currentTarget) + 1);\n      });\n      this.$el.on(\'mouseout.starrr\', function() {\n        return _this.syncRating();\n      });\n      this.$el.on(\'click.starrr\', \'span\', function(e) {\n        return _this.setRating(_this.$el.find(\'span\').index(e.currentTarget) + 1);\n      });\n      this.$el.on(\'starrr:change\', this.options.change);\n    }\n\n    Starrr.prototype.createStars = function() {\n      var _i, _ref, _results;\n\n      _results = [];\n      for (_i = 1, _ref = this.options.numStars; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {\n        _results.push(this.$el.append("<span class=\'glyphicon .glyphicon-star-empty\'></span>"));\n      }\n      return _results;\n    };\n\n    Starrr.prototype.setRating = function(rating) {\n      if (this.options.rating === rating) {\n        rating = void 0;\n      }\n      this.options.rating = rating;\n      this.syncRating();\n      return this.$el.trigger(\'starrr:change\', rating);\n    };\n\n    Starrr.prototype.syncRating = function(rating) {\n      var i, _i, _j, _ref;\n\n      rating || (rating = this.options.rating);\n      if (rating) {\n        for (i = _i = 0, _ref = rating - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          this.$el.find(\'span\').eq(i).removeClass(\'glyphicon-star-empty\').addClass(\'glyphicon-star\');\n        }\n      }\n      if (rating && rating < 5) {\n        for (i = _j = rating; rating <= 4 ? _j <= 4 : _j >= 4; i = rating <= 4 ? ++_j : --_j) {\n          this.$el.find(\'span\').eq(i).removeClass(\'glyphicon-star\').addClass(\'glyphicon-star-empty\');\n        }\n      }\n      if (!rating) {\n        return this.$el.find(\'span\').removeClass(\'glyphicon-star\').addClass(\'glyphicon-star-empty\');\n      }\n    };\n\n    return Starrr;\n\n  })();\n  return $.fn.extend({\n    starrr: function() {\n      var args, option;\n\n      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      return this.each(function() {\n        var data;\n\n        data = $(this).data(\'star-rating\');\n        if (!data) {\n          $(this).data(\'star-rating\', (data = new Starrr($(this), option)));\n        }\n        if (typeof option === \'string\') {\n          return data[option].apply(data, args);\n        }\n      });\n    }\n  });\n})(window.jQuery, window);\n\n$(function() {\n  return $(".starrr").starrr();\n});\n\n$( document ).ready(function() {\n\n  $(\'#stars\').on(\'starrr:change\', function(e, value){\n    $(\'#count\').html(value);\n  });\n\n  $(\'#stars-existing\').on(\'starrr:change\', function(e, value){\n    $(\'#count-existing\').html(value);\n  });\n});';


}).call(this);
:ET